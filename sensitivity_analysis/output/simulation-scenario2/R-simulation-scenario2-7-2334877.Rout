
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### BATCH_simulation-scenario2.R --- 
> ##----------------------------------------------------------------------
> ## Author: Brice Ozenne
> ## Created: sep 15 2022 (16:48) 
> ## Version: 
> ## Last-Updated: okt 11 2022 (13:44) 
> ##           By: Brice Ozenne
> ##     Update #: 65
> ##----------------------------------------------------------------------
> ## 
> ### Commentary: 
> ## 
> ### Change Log:
> ##----------------------------------------------------------------------
> ## 
> ### Code:
> 
> ## cd /projects/biostat01/people/hpl802/pipeline/
> ## ## INTERACTIVE
> ## source("BATCH_simulation-scenario2.R")
> ## ## BATCH
> ## for ITER in `seq 1 10`;
> ## do
> ## eval 'R CMD BATCH --vanilla "--args iter_sim='$ITER' n.iter_sim=10" BATCH_simulation-scenario2.R output/simulation-scenario2/simulation-scenario2-'$ITER'.Rout &'
> ## done
> ## 346982-346991
> 
> ## * SLURM
> args <- commandArgs(TRUE) ## BATCH MODE
> if(length(args)>0){
+     for (arg in args){
+         eval(parse(text=arg))
+     }
+ }else{ ## SLUMR
+     iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
+     n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
+ }
> iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
> n.iter_sim <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_COUNT"))
> if(is.na(iter_sim)){iter_sim <- 1}
> if(is.na(n.iter_sim)){n.iter_sim <- 10}
> 
> set.seed(1)
> seqSeed <- sample(1:max(1e5,n.iter_sim),size=n.iter_sim,replace=FALSE)
> iSeed <- seqSeed[iter_sim]
> set.seed(iSeed)
> 
> cat("iteration ",iter_sim," over ",n.iter_sim," (seed ",iSeed,")\n",sep="")
iteration 7 over 100 (seed 32618)
> 
> ## * Prepare export
> path <- "."
> path.res <- file.path(path,"Results","simulation-scenario2")
> if(dir.exists(path.res)==FALSE){
+     if(dir.exists(file.path(path,"Results"))==FALSE){
+     dir.create(file.path(path,"Results"))
+     }
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simulation-scenario2")
> if(dir.exists(path.output)==FALSE){
+     if(dir.exists(file.path(path,"output"))==FALSE){
+     dir.create(file.path(path,"output"))
+     }
+     dir.create(path.output)
+ }
> 
> ## * Dependencies
> data.table::setDTthreads(1)
> library(data.table)
> library(mvtnorm)
> library(Matrix)
> library(LMMstar)
Loading required package: nlme
LMMstar version 0.8.6

Attaching package: ‘LMMstar’

The following object is masked from ‘package:base’:

    remove

> library(lava)
> library(pbapply)
> source("FCT_simulation.R")
> 
> ## * Parameters
> seqN <- c(10, 25, 50, 100, 200, 500)
> beta <- 0.5
> n.sim <- c(100,10) ## number of simulations, number of times proportion is estimated
> n.cpus <- 25
> Sigma <- diag(c(2.5,0.25,5,7.5,10,15))
> Sigmatot <- Sigma+diag(1,NROW(Sigma),NROW(Sigma))
> 
> ## * GLS weights!
> ## solve(matrix(1, nrow = 1, ncol = NCOL(Sigma)) %*% solve(Sigma) %*% matrix(1, nrow = NCOL(Sigma), ncol = 1)) %*% matrix(1, nrow = 1, ncol = NCOL(Sigma)) %*% solve(Sigma)
> cat("\n Relative variance: ")

 Relative variance: > relativeVar <- sqrt(diag(Sigmatot))/min(sqrt(diag(Sigmatot)))
> print(relativeVar)
[1] 1.673320 1.000000 2.190890 2.607681 2.966479 3.577709
> ## [1] 1.673320 1.000000 2.190890 2.607681 2.966479 3.577709
> 
> cat("\n Pool weights: ")

 Pool weights: > Sigma2weight <- round(100*(1/diag(Sigmatot))/sum((1/diag(Sigmatot))),2)
> print(table(unname(Sigma2weight)))

  4.1  5.97  7.72 10.94 18.75 52.51 
    1     1     1     1     1     1 
> ## 4.1  5.97  7.72 10.94 18.75 52.51 
> ##   1     1     1     1     1     1 
> 
> cat("\n GLS weights: ")

 GLS weights: > Sigma2weight <- round(100*colSums(solve(Sigmatot))/sum(solve(Sigmatot)),2)
> print(table(unname(Sigma2weight)))

  4.1  5.97  7.72 10.94 18.75 52.51 
    1     1     1     1     1     1 
> ## 4.1  5.97  7.72 10.94 18.75 52.51 
> ##   1     1     1     1     1     1 
> 
> cat("\n")

> 
> ## * Simulation
> res <- NULL
> for(iSim in 1:n.sim[1]){
+     cat(iSim,": ")
+     for(iN in seqN){ ## iN <- 200
+         cat(iN," ")
+         try(res <- rbind(res,
+                          cbind(sim = iSim, seed = iSeed, analyzeData(simData(n.obs = iN, sigma.pipe = Sigma, beta = 0), proportion = iSim<=n.sim[2]))))
+         try(res <- rbind(res,
+                          cbind(sim = iSim, seed = iSeed, analyzeData(simData(n.obs = iN, sigma.pipe = Sigma, beta = beta), proportion = iSim<=n.sim[2]))))
+     }
+     cat("\n")
+     saveRDS(res, file = file.path(path.res,paste0("scenario2_",iter_sim,"(tempo).rds")))
+ }
1 : 10  25  50  100  200  500  
2 : 10  25  50  100  200  500  
3 : 10  25  50  100  200  500  
4 : 10  25  50  100  200  500  
5 : 10  25  50  100  200  500  
6 : 10  25  50  100  200  500  
7 : 10  25  50  100  200  500  
8 : 10  25  50  100  200  500  
9 : 10  25  50  100  200  500  
10 : 10  25  50  100  200  500  
11 : 10  25  50  100  200  500  
12 : 10  25  50  100  200  500  
13 : 10  25  50  100  200  500  
14 : 10  25  50  100  200  500  
15 : 10  25  50  100  200  500  
16 : 10  25  50  100  200  500  
17 : 10  25  50  100  200  500  
18 : 10  25  50  100  200  500  
19 : 10  25  50  100  200  500  
20 : 10  25  50  100  200  500  
21 : 10  25  50  100  200  500  
22 : 10  25  50  100  200  500  
23 : 10  25  50  100  200  500  
24 : 10  25  50  100  200  500  
25 : 10  25  50  100  200  500  
26 : 10  25  50  100  200  500  
27 : 10  25  50  100  200  500  
28 : 10  25  50  100  200  500  
29 : 10  25  50  100  200  500  
30 : 10  25  50  100  200  500  
31 : 10  25  50  100  200  500  
32 : 10  25  50  100  200  500  
33 : 10  25  50  100  200  500  
34 : 10  25  50  100  200  500  
35 : 10  25  50  100  200  500  
36 : 10  25  50  100  200  500  
37 : 10  25  50  100  200  500  
38 : 10  25  50  100  200  500  
39 : 10  25  50  100  200  500  
40 : 10  25  50  100  200  500  
41 : 10  25  50  100  200  500  
42 : 10  25  50  100  200  500  
43 : 10  25  50  100  200  500  
44 : 10  25  50  100  200  500  
45 : 10  25  50  100  200  500  
46 : 10  25  50  100  200  500  
47 : 10  25  50  100  200  500  
48 : 10  25  50  100  200  500  
49 : 10  25  50  100  200  500  
50 : 10  25  50  100  200  500  
51 : 10  25  50  100  200  500  
52 : 10  25  50  100  200  500  
53 : 10  25  50  100  200  500  
54 : 10  25  50  100  200  500  
55 : 10  25  50  100  200  500  
56 : 10  25  50  100  200  500  
57 : 10  25  50  100  200  500  
58 : 10  25  50  100  200  500  
59 : 10  25  50  100  200  500  
60 : 10  25  50  100  200  500  
61 : 10  25  50  100  200  500  
62 : 10  25  50  100  200  500  
63 : 10  25  50  100  200  500  
64 : 10  25  50  100  200  500  
65 : 10  25  50  100  200  500  
66 : 10  25  50  100  200  500  
67 : 10  25  50  100  200  500  
68 : 10  25  50  100  200  500  
69 : 10  25  50  100  200  500  
70 : 10  25  50  100  200  500  
71 : 10  25  50  100  200  500  
72 : 10  25  50  100  200  500  
73 : 10  25  50  100  200  500  
74 : 10  25  50  100  200  500  
75 : 10  25  50  100  200  500  
76 : 10  25  50  100  200  500  
77 : 10  25  50  100  200  500  
78 : 10  25  50  100  200  500  
79 : 10  25  50  100  200  500  
80 : 10  25  50  100  200  500  
81 : 10  25  50  100  200  500  
82 : 10  25  50  100  200  500  
83 : 10  25  50  100  200  500  
84 : 10  25  50  100  200  500  
85 : 10  25  50  100  200  500  
86 : 10  25  50  100  200  500  
87 : 10  25  50  100  200  500  
88 : 10  25  50  100  200  500  
89 : 10  25  50  100  200  500  
90 : 10  25  50  100  200  500  
91 : 10  25  50  100  200  500  
92 : 10  25  50  100  200  500  
93 : 10  25  50  100  200  500  
94 : 10  25  50  100  200  500  
95 : 10  25  50  100  200  500  
96 : 10  25  50  100  200  500  
97 : 10  25  50  100  200  500  
98 : 10  25  50  100  200  500  
99 : 10  25  50  100  200  500  
100 : 10  25  50  100  200  500  
> cat("\n")

> 
> ## * Export
> rownames(res) <- NULL
> saveRDS(res, file = file.path(path.res,paste0("scenario2_",iter_sim,".rds")))
> sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux 8.5 (Ootpa)

Matrix products: default
BLAS:   /opt/software/R/4.1.2/lib64/R/lib/libRblas.so
LAPACK: /opt/software/R/4.1.2/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] pbapply_1.5-0     lava_1.6.10       LMMstar_0.8.6     nlme_3.1-153     
[5] Matrix_1.3-4      mvtnorm_1.1-3     data.table_1.14.2

loaded via a namespace (and not attached):
 [1] compiler_4.1.2      pillar_1.8.1        tools_4.1.2        
 [4] digest_0.6.29       lifecycle_1.0.3     tibble_3.1.8       
 [7] gtable_0.3.1        lattice_0.20-45     pkgconfig_2.0.3    
[10] rlang_1.0.6         cli_3.4.1           parallel_4.1.2     
[13] coda_0.19-4         dplyr_1.0.10        globals_0.16.1     
[16] generics_0.1.3      vctrs_0.4.2         grid_4.1.2         
[19] tidyselect_1.1.2    glue_1.6.2          listenv_0.8.0      
[22] R6_2.5.1            parallelly_1.32.1   future.apply_1.9.1 
[25] fansi_1.0.3         survival_3.2-13     multcomp_1.4-20    
[28] TH.data_1.1-1       ggplot2_3.3.6       purrr_0.3.5        
[31] magrittr_2.0.3      scales_1.2.1        codetools_0.2-18   
[34] emmeans_1.8.1-1     MASS_7.3-54         splines_4.1.2      
[37] future_1.28.0       xtable_1.8-4        colorspace_2.0-3   
[40] numDeriv_2016.8-1.1 sandwich_3.0-2      utf8_1.2.2         
[43] estimability_1.4.1  munsell_0.5.0       zoo_1.8-11         
> 
> 
> ##----------------------------------------------------------------------
> ### BATCH_simulation-scenario2.R ends here
> 
> proc.time()
    user   system  elapsed 
1332.642    0.499 1351.686 
